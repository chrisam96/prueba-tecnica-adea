server.port=${PORT}
#server.port=${PORT:PORT_APP}
#server.port=10000
#server.port=9011
server.address=0.0.0.0

## Propiedades de conexion a la BD de MySQL 
## spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
## spring.datasource.url=jdbc:mysql://localhost:3306/usuarios_adea?serverTimezone=UTC
## spring.datasource.username=root
## spring.datasource.password=root

# Propiedades de conexion a la BD de PostgreSQL (AMBIENTE LOCAL)
# spring.datasource.url=jdbc:postgresql://localhost:5432/usuarios_adea?serverTimezone=UTC-0600&useUnicode=true&useJDBCCompliantTimezoneShift=true
# spring.datasource.username=postgres
# spring.datasource.password=root
## spring.datasource.driver-class-name=org.postgresql.Driver
## spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
## spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
## spring.jpa.hibernate.ddl-auto=update #update: si cambia alguna propiedad del entity, eso se refleja en la base


# Propiedades de conexion a la BD de PostgreSQL
spring.datasource.url=jdbc:postgresql://${HOST}:${PORTBD}/${DATABASE}?serverTimezone=GMT-06:00&useUnicode=true&useJDBCCompliantTimezoneShift=true
spring.datasource.username=${USERNAME}
spring.datasource.password=${PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Propiedades para establecer una Zona Horaria en el Back
spring.jackson.time-zone=GMT-06:00
spring.jpa.properties.hibernate.jdbc.time_zone=GMT-06:00

# Logging de JPQL
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# USADO PARA DESPLEGAR UN LOGGIN MAS EXTENSO
#logging.level.org.springframework.web=DEBUG
#logging.level.org.thymeleaf=TRACE
#spring.devtools.restart.log-condition-evaluation-report=false
#debug=false

# Mostrar sentencias SQL
spring.jpa.show-sql=true

# Propiedades para que hibernate cree adecuadamente las instrucciones SQL
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
#spring.jpa.hibernate.ddl-auto=update #update: si cambia alguna propiedad del entity, eso se refleja en la base

# Sufijo de las paginas web (.html) de las Vistas en Spring MVC
#
# > NOTAS :
# 1. Con esto, SOLO FUNCIONAN LAS PAGINAS QUE ESTAN EN resource/static o resource/public :
#    spring.mvc.view.suffix=.html
#
# 2. SI SE AGREGA Thymeleaf entonces sobreescribe esto cambiando las rutas a resource/templates
#spring.mvc.view.suffix=.html #Usado para vistas dinamicas como Thymleaf, JSP, JSF

# Configuracion del manejo de paginas HTML de error

#spring.web.resources.static-locations=classpath:/static/,classpath:/templates/
spring.web.resources.static-locations=classpath:/static/

# Habilita el lanzamiento de excepciones cuando no se encuentra un handler
spring.mvc.throw-exception-if-no-handler-found=true
#spring.mvc.throw-exception-if-no-handler-found=false

# Asegura que los recursos estáticos se sirvan correctamente
spring.web.resources.add-mappings=true

# Desactiva la página de error blanca por defecto
server.error.whitelabel.enabled=false

# Especifica la ruta personalizada para manejo de errores
#server.error.path=/errores

# Configuracion de Thymeleaf
#spring.thymeleaf.prefix=classpath:/templates/
#spring.thymeleaf.suffix=.html
#spring.thymeleaf.cache=false
#spring.thymeleaf.mode=HTML
#spring.thymeleaf.enabled=false